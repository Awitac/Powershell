# Part 1
Add-Type -AssemblyName PresentationFramework
Add-Type -AssemblyName System.Windows.Forms

[xml]$XAML = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        Title="Awitac Axess Discovery Viewer" Height="400" Width="800">
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="Auto"/>
            <RowDefinition/>
        </Grid.RowDefinitions>
        <Grid Grid.Row="0" Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="Response:" FontWeight="Bold" Margin="5,0,5,0"/>
            <Border BorderBrush="Black" BorderThickness="1" Grid.Column="1">
                <TextBlock Name="ResponseCodeTextBlock" Margin="5,0,0,0" Width="60"/>
            </Border>
            <Button Name="PauseResumeButton" Grid.Column="2" Content="Pause" Width="100" Margin="5,0,0,0"/>
            <Button Name="ExportButton" Grid.Column="3" Content="Export" Width="100" Margin="5,0,0,0"/>
            <Grid Grid.Column="4">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>
                <Grid Grid.Column="1">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>
                    <Button Name="ExitButton" Content="Exit" Width="100" Margin="5,0,0,0"/>
                </Grid>
            </Grid>
        </Grid>
        <Grid Grid.Row="1" Margin="5">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Grid.Column="0" Text="URL:" FontWeight="Bold" Margin="5,0,5,0"/>
            <TextBox Name="UrlTextBox" Grid.Column="1" Margin="5,0,0,0" MinWidth="200"/>
        </Grid>
        <TextBox Grid.Row="2" Name="ResponseTextBox" IsReadOnly="True" TextWrapping="Wrap" AcceptsReturn="True" ScrollViewer.VerticalScrollBarVisibility="Auto" Margin="5"/>
    </Grid>
</Window>
"@


$reader = (New-Object System.Xml.XmlNodeReader $XAML)
$Window = [Windows.Markup.XamlReader]::Load($reader)

$ResponseTextBox = $Window.FindName("ResponseTextBox")
$ResponseCodeTextBlock = $Window.FindName("ResponseCodeTextBlock")
$UrlTextBox = $Window.FindName("UrlTextBox")
$ExportButton = $Window.FindName("ExportButton")
$PauseResumeButton = $Window.FindName("PauseResumeButton")
$ExitButton = $Window.FindName("ExitButton")

$UrlReady = $false

$previousResponse = ""

function UpdateResponse {
    if (-not $UrlReady -or $UrlTextBox.Text.Trim() -eq "") {
        return
    }

    $baseUrl = $UrlTextBox.Text.Trim()

    if ($baseUrl -eq "") {
        return
    }

    if ($baseUrl.StartsWith("https:/")) {
        $baseUrl = $baseUrl -replace "^https:/", "https://"
    } elseif (-not $baseUrl.StartsWith("https://")) {
        $baseUrl = "https://$baseUrl"
    }

    $url = "$baseUrl/axess/SystemManagerService.svc/Discovery"
    $body = "{}"
    $headers = @{
        "Content-Type" = "application/json"
    }

    $request = @{
        Method = "POST"
        Uri = $url
        Headers = $headers
        Body = $body
    }

    try {
        $response = Invoke-WebRequest @request
        $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
        $responseCode = $response.StatusCode

        $jsonResponse = $response.Content | ConvertFrom-Json | ConvertTo-Json -Depth 10

        $currentResponse = "Timestamp: $timestamp`r`nResponse code: $responseCode`r`n`r`nResponse body:`r`n$jsonResponse"

        if ($currentResponse -ne $previousResponse) {
            $ResponseTextBox.Dispatcher.Invoke([action]{
                $ResponseTextBox.Text = $currentResponse
            }, "Normal")

            $ResponseCodeTextBlock.Dispatcher.Invoke([action]{
                $ResponseCodeTextBlock.Text = $responseCode.ToString()
            }, "Normal")

            $previousResponse = $currentResponse
        }
    } catch {
        $ResponseTextBox.Dispatcher.Invoke([action]{
            $ResponseTextBox.Text = "Error: " + $_.Exception.Message
        }, "Normal")
    }
}

$UpdateTimer.Start() 

$PauseResumeButton = $Window.FindName("PauseResumeButton")
$PauseResumeButton.Add_Click({
    if ($UpdateTimer.IsEnabled) {
        $UpdateTimer.Stop()
        $PauseResumeButton.Content = "Resume"
    } else {
        $UpdateTimer.Start()
        $PauseResumeButton.Content = "Pause"
    }
})

$ExportButton.Add_Click({
    $saveFileDialog = New-Object System.Windows.Forms.SaveFileDialog
    $saveFileDialog.Filter = "Text Files (*.txt)|*.txt|All Files (*.*)|*.*"
    $saveFileDialog.DefaultExt = "txt"
    $saveFileDialog.ShowDialog() | Out-Null
    $filename = $saveFileDialog.FileName
    if ($filename) {
        $ResponseTextBox.Text | Set-Content -Path $filename
    }
})

$ExitButton.Add_Click({
    $Window.Close()
})

$UrlTextBox.Add_KeyDown({
    if ($_.Key -eq "Enter") {
        $UrlReady = $true
        UpdateResponse
    }
})

$Window.ShowDialog() | Out-Null
