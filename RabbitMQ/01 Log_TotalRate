#############################################################################################################################
#
#   * Encodes authentication string for the request header
#   * Sets API endpoint for the queues with specific columns to reduce fetched data
#   * Starts an infinite loop with the following actions:
#       * Fetches queue data from the API using a try-catch block to handle errors
#       * Initializes variables for total message rate and highest consuming queue
#       * Iterates through queues, calculates total message rate and identifies the highest consuming queue
#       * Formats and prints the output to the console and appends it to a log file
#       * Sleeps for the specified interval before fetching data again
#
#############################################################################################################################
#
function Monitor-RabbitMQMessageRate {
    param (
        [string]$RabbitMQBaseUrl = "http://localhost:15672",
        [string]$Username = "admin",
        [string]$Password = "changeme",
        [int]$SleepIntervalSeconds = 1,
        [string]$LogFilePath = "C:\Awitac_Log_RabbitMQ_Rate.txt"
    )

    # Encode the authentication string for the request header
    $EncodedAuth = [System.Convert]::ToBase64String([System.Text.Encoding]::ASCII.GetBytes(("{0}:{1}" -f $Username,$Password)))
    $Headers = @{
        "Authorization" = "Basic $EncodedAuth"
        "Content-Type"  = "application/json"
    }

    # Set the API endpoint for the queues
    $Url = $RabbitMQBaseUrl + "/api/queues?columns=name,message_stats.deliver_get_details.rate"

    # Print the headers
    Write-Host " Time                   Total/s      Highest Consuming Queue                                                        Rate/s "
    Write-Host "-------------------    ---------    ---------------------------------------------------------------------------    --------"

    # Start the loop
    while ($true) {
        try {
            # Fetch the queues from the API
            $Queues = Invoke-RestMethod -Method Get -Uri $Url -Headers $Headers -ErrorAction Stop

            # Initialize variables
            $TotalMessageRate = 0
            $HighestConsumingQueue = $null
            $HighestMessageRate = 0

            # Iterate through the queues to calculate the total message rate and the highest consuming queue
            foreach ($Queue in $Queues) {
                $MessageRate = $Queue.message_stats.deliver_get_details.rate
                $TotalMessageRate += $MessageRate

                if ($MessageRate -gt $HighestMessageRate) {
                    $HighestMessageRate = $MessageRate
                    $HighestConsumingQueue = $Queue.name
                }
            }

            # Get the current date and time
            $dateTime = Get-Date -Format "yyyy/MM/dd HH:mm:ss"

            # Format the output string
            $FormattedOutput = "$dateTime {0,8:N2}{1,2} |    {2,-75} {3,8:N2}{4,2}" -f $TotalMessageRate,"/s", $HighestConsumingQueue, $HighestMessageRate,"/s"

            # Print the formatted output
            Write-Host $FormattedOutput
            Out-File -FilePath $LogFilePath -InputObject $FormattedOutput -Encoding ASCII -Append
        }
        catch {
            Write-Host "Error fetching queue information. Please check your RabbitMQ settings and connectivity."
        }

        # Sleep for the specified interval
        Start-Sleep -Seconds $SleepIntervalSeconds
    }
}

# Call the function with default parameters
Monitor-RabbitMQMessageRate
