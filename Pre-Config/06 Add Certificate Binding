# Creatated by Awitac 
# Changes                                                                                                    ES/SA 2023-03-22
#
#############################################################################################################################
#
#   * 
#   *
#
#############################################################################################################################
#
# Part 1: Retrieve SSL certificate bindings and save the output to a file
# Get the bindings
$bindings = netsh http show sslcert

# Display the list of bindings
Write-Host "List of bindings:"
for ($i = 0; $i -lt $bindings.Count; $i++) {
    Write-Host "$($bindings[$i].Trim())"
}

# Save the list of bindings to a text file
$bindings | Out-File -FilePath "C:\outputSSL.txt"

# Open the file in a new window
Invoke-Item "C:\outputSSL.txt"


# Part 2: Add a new SSL certificate binding
# Prompt user for input
$validThumbprint = $false
while (-not $validThumbprint) {
    try {
        Write-Host -NoNewline -ForegroundColor Yellow "Enter the Thumbprint of the Certificate: "
        $certificateThumbprint = Read-Host
        if ($certificateThumbprint -match '^[0-9a-fA-F]{40}$') {
            $validThumbprint = $true
        } else {
            throw "Invalid certificate thumbprint format: Thumbprint should be a 40-character hexadecimal string."
        }
    } catch {
        Write-Host "Error: $_" -ForegroundColor Red
    }
}

$validPort = $false
while (-not $validPort) {
    try {
        Write-Host -NoNewline -ForegroundColor Yellow "Enter the Port number (1-65535): "
        $port = Read-Host
        if ($port -as [int] -lt 1 -or $port -as [int] -gt 65535) {
            throw "Port is not allowed. Port needs to be between 1 and 65535"
        }
        if (-not (netsh http show sslcert | Where-Object { $_ -match "IP:port\s+: 0.0.0.0:$port" })) {
            $validPort = $true
        } else {
            throw "Port $port is already in use in a certificate binding."
        }
    } catch {
        Write-Host "Error: $_" -ForegroundColor Red
    }
}

$validAppId = $false
while (-not $validAppId) {
    try {
        Write-Host -NoNewline -ForegroundColor Yellow "Enter the Application ID: "
        $applicationId = Read-Host
        if ($applicationId -match '^(\{){1}[0-9a-fA-F]{8}(\-){1}[0-9a-fA-F]{4}(\-){1}[0-9a-fA-F]{4}(\-){1}[0-9a-fA-F]{4}(\-){1}[0-9a-fA-F]{12}(\}){1}$') {
            [guid]$applicationId | Out-Null
            $validAppId = $true
        } else {
            throw "Invalid Application ID format: ID should be a GUID in the format {xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx}."
        }
    } catch {
        Write-Host "Error: $_" -ForegroundColor Red
    }
}

try {
    netsh http add sslcert ipport=0.0.0.0:$port certhash=$certificateThumbprint appid=$applicationId clientcertnegotiation=disable
    
    # Display the newly added binding
    $newBinding = netsh http show sslcert ipport=0.0.0.0:$port
    for ($i = 0; $i -lt $newBinding.Count; $i++) {
        Write-Host "$($newBinding[$i].Trim())"
    }
} catch {
    Write-Host "Error: $_" -ForegroundColor Red
}

Start-Sleep -Seconds 2


# Part 3: Delete the output file
$detelefile = Test-Path "C:\outputSSL.txt"
$deletefilepath = "C:\outputSSL.txt"
if ($detelefile) {
    try {
        Remove-Item -Path $deletefilepath -Force
        Write-Host "File $deletefilepath deleted" -ForegroundColor Yellow
    } catch {
        Write-Host "Error: $_"
    }
} else {
    Write-Host "File $deletefilepath not found" -ForegroundColor Red
}
