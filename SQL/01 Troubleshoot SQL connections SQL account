# Creatated by Awitac 
# Changes                                                                                                    ES/SA 2023-03-06
#
#############################################################################################################################
#
#   The script connects to a SQL Server database with a SQL account and measures the time it takes to log in. 
#   It then logs the login time to a text file and handles any connection errors that may occur. 
#   The script runs indefinitely until a condition is met to exit the loop
#
#   * Set SQL Server credentials
#   * Create an infinite loop
#       *  Measure login time and log to file
#       *  Handle connection errors and log to file
#       *  Dispose of connection object
#       *   Wait for 1 second
#   * Add a mechanism to exit the infinite loop based on a condition
#
#############################################################################################################################
#
# Set the SQL Server credentials
$serverName = "AWITAC-G1-N3\G1_SQL"
$databaseName = "Unite"
$username = "your_username"
$password = "your_password"

# Measure the time it takes to log in

while ($true) {
    $startTime = Get-Date
    $connectionString = "Server=$serverName;Database=$databaseName;User Id=$username;Password=$password;"
    try {
        $connection = New-Object System.Data.SqlClient.SqlConnection($connectionString)
        $connection.Open()
        $endTime = Get-Date
        $elapsedTime = New-TimeSpan $startTime $endTime

        # Display the login time
        $outputtext = "$endTime Login time: $($elapsedTime.TotalSeconds) seconds"
        Write-Output $outputtext 

        Out-File -FilePath C:\Process.txt -InputObject $outputtext -Encoding ASCII -append
    }
    catch {
        $formatstring = "{0} : {1}`n{2}`n" +
                        "    + CategoryInfo          : {3}`n" +
                        "    + FullyQualifiedErrorId : {4}`n"
        $fields = $_.InvocationInfo.MyCommand.Name,
                  $_.ErrorDetails.Message,
                  $_.InvocationInfo.PositionMessage,
                  $_.CategoryInfo.ToString(),
                  $_.FullyQualifiedErrorId

        $formatstring -f $fields
        $_
        Out-File -FilePath C:\Process.txt -InputObject  $_ -Encoding ASCII  -append
    }
    finally {
        $connection.Dispose()
    }

    Start-Sleep -Seconds 1

    # Add a mechanism to exit the infinite loop
    if ($some_condition) {
        break
    }
}
